service: ${SERVICE-NAME}

frameworkVersion: "2"
useDotenv: true

plugins:
  - serverless-hooks-plugin
  # - serverless-domain-manager

custom:
  # domains:
  #   dev: ""
  # certificates:
  #   dev: ""
  host:
    dev: ${AWS_HOST_DOMAIN}
  deploymentBuckets:
    dev: ${AWS_BUCKET}
  hooks:
    before:package:initialize:
      - AWS_REGION=ap-southeast-1 AWS_LAMBDA_FUNCTION_NAME=${self:service}-${opt:stage, 'dev'} HOST=${self:custom.host.${opt:stage, 'dev'}, ''} make build.linux specs
    after:deploy:finalize:
      - make clean

# customDomain:
#   certificateName: ${self:custom.certificates.${self:provider.stage}, ''}
#   domainName: ${self:custom.domains.${self:provider.stage}, ''}
#   basePath: ""
#   stage: ${self:provider.stage}
#   createRoute53Record: true

package:
  patterns:
    - "!./**"
    - ".env"
    - "server"
    - "swaggerui/**"
    - "templates/**"

provider:
  lambdaHashingVersion: "20201221"

  name: aws
  runtime: go1.x
  profile: ${AWS_PROFILE}
  memorySize: 128
  timeout: 6 # optional, in seconds, default is 6
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}
  vpc:
    subnetIds:
      - ${AWS_SUBNET_ID}
    securityGroupIds:
      - ${AWS_SECURITY_GROUP_ID}
  deploymentBucket:
    name: ${self:custom.deploymentBuckets.${opt:stage, 'dev'}, ''}
  apiGateway:
    shouldStartNameWithService: true
  environment:
    STAGE: ${opt:stage, 'dev'}
  iam:
    role: ${AWS_IAM_ROLE}

functions:
  app:
    handler: server
    name: ${self:service}-${opt:stage, 'dev'}
    events:
      - http:
          path: "/"
          method: ANY
          cors: true
      - http:
          path: "{proxy+}"
          method: ANY
          cors: true
